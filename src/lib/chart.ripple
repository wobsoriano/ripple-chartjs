import { Chart as ChartJS } from 'chart.js';
import type { ChartType, DefaultDataPoint } from 'chart.js';
import type { ChartProps } from './types';
import { effect, track, untrack } from 'ripple';
import { cloneData } from './utils';
import { setOptions, setDatasets, setLabels } from './utils';

function watch(deps: Array<any>, cb: () => void) {
	let first = true;

	effect(() => {
		deps.forEach((dep, index) => @dep);

		if (first) {
			console.log('watch single first')
			first = false;

			return;
		}
		console.log('watch single second')

		return untrack(cb);
	});
};

export component Chart(props: ChartProps<ChartType, DefaultDataPoint<ChartType>>) {
	let canvasNode = track()
	let chart = track()

	const renderChart = () => {
		if (!@canvasNode) {
			return;
		}


		@chart = new ChartJS(@canvasNode, {
			type: props.type,
			data: cloneData(props.data, props.datasetIdKey),
			options: props.options && {
				...props.options,
			},
			plugins: props.plugins,
		});
	};

	const destroyChart = () => {
		if (@chart) {
			@chart.destroy();
			@chart = null;
		}
	};

	const options = track(() => props.options)

	watch([options], () => {
		if (!props.redraw && @chart && @options) {
			setOptions(@chart, @options);
		}
	});

	const datasets = track(() => props.data.datasets);
	const labels = track(() => props.data.labels);

	watch([labels], () => {
		if (!props.redraw && @chart) {
			setLabels(@chart.config.data, @labels);
		}
	});

	watch([datasets], () => {
		if (!props.redraw && @chart && @datasets) {
			setDatasets(@chart.config.data, @datasets, props.datasetIdKey);
		}
	});

	watch([options, datasets, labels], () => {
		if (!@chart) {
			return;
		}

		if (props.redraw) {
			destroyChart();
			setTimeout(renderChart);
		} else {
			@chart.update(props.updateMode);
		}

	});

	watch([track(() => props.type)], () => {
		destroyChart();
		renderChart();
	});

	effect(() => {
		untrack(renderChart);

		return destroyChart;
	});

	<canvas {ref node => {
			@canvasNode = node;

			return () => @canvasNode = undefined;
		}} role='img' height={props.height} width={props.width} />
}
